{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","Form","props","onSubmit","loadWeather","type","name","placeholder","Weather","country","city","temperature","tempLow","tempHigh","humidity","description","windSpeed","error","App","state","undefined","getWeather","e","a","preventDefault","target","elements","value","fetch","process","api_call","json","response","setState","Math","trunc","main","temp","temp_min","temp_max","sys","weather","wind","speed","console","log","className","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mRAUeA,EARA,WACX,OACI,6BACI,4CACA,yFCMGC,EAVF,SAACC,GACV,OACI,0BAAMC,SAAUD,EAAME,aAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCSGC,EAdC,SAACN,GACb,OACI,6BACKA,EAAMO,SAAWP,EAAMQ,MAAQ,wCAAcR,EAAMQ,KAApB,MAA6BR,EAAMO,SAClEP,EAAMS,aAAe,2CAAiBT,EAAMS,YAAvB,UACrBT,EAAMU,SAAWV,EAAMW,UAAY,yCAAeX,EAAMW,SAArB,oBAA6CX,EAAMU,QAAnD,SACnCV,EAAMY,UAAY,wCAAcZ,EAAMY,SAApB,MAClBZ,EAAMa,aAAe,0CAAgBb,EAAMa,aAC3Cb,EAAMc,WAAa,0CAAgBd,EAAMc,UAAtB,QACnBd,EAAMe,OAAS,2BAAIf,EAAMe,SCwDvBC,G,kNA5DbC,MAAQ,CACNR,iBAAaS,EACbR,aAASQ,EACTP,cAAUO,EACVV,UAAMU,EACNX,aAASW,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,eAAWI,EACXH,WAAOG,G,EAGTC,W,uCAAa,WAAOC,GAAP,qBAAAC,EAAA,6DAEXD,EAAEE,iBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,MAC9BlB,EAAUa,EAAEG,OAAOC,SAASjB,QAAQkB,MAJ/B,SAKYC,MAAM,oDAAD,OAAqDlB,EAArD,YAA6DD,EAA7D,kBAA8EoB,qCAL/F,cAKLC,EALK,gBAMYA,EAASC,OANrB,OAMLC,EANK,OAQX,EAAKC,SAAS,CACZtB,YAAauB,KAAKC,MAAqC,KAA9BH,EAASI,KAAKC,KAAO,QAAc,IAC5DzB,QAASsB,KAAKC,MAAyC,KAAlCH,EAASI,KAAKE,SAAW,QAAc,IAC5DzB,SAAUqB,KAAKC,MAAyC,KAAlCH,EAASI,KAAKG,SAAW,QAAc,IAC7D7B,KAAMsB,EAAS1B,KACfG,QAASuB,EAASQ,IAAI/B,QACtBK,SAAUkB,EAASI,KAAKtB,SACxBC,YAAaiB,EAASS,QAAQ,GAAG1B,YACjCC,UAAWgB,EAASU,KAAKC,MACzB1B,MAAO,KAGT2B,QAAQC,IAAIb,GApBD,4C,6GAwBX,OACE,yBAAKc,UAAU,OACf,yBAAKA,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE1C,YAAa2C,KAAK1B,aAEpB,kBAAC,EAAD,CACEV,YAAaoC,KAAK5B,MAAMR,YACxBC,QAASmC,KAAK5B,MAAMP,QACpBC,SAAUkC,KAAK5B,MAAMN,SACrBH,KAAMqC,KAAK5B,MAAMT,KACjBD,QAASsC,KAAK5B,MAAMV,QACpBK,SAAUiC,KAAK5B,MAAML,SACrBC,YAAagC,KAAK5B,MAAMJ,YACxBC,UAAW+B,KAAK5B,MAAMH,UACtBC,MAAO8B,KAAK5B,MAAMF,c,GArDV+B,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACL2B,QAAQ3B,MAAMA,EAAMkD,a","file":"static/js/main.34d2ad94.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () => {\n    return (\n        <div>\n            <h1>Weather Info</h1>\n            <p>Search for a city to see the current weather conditions.</p>\n        </div>\n    )\n}\nexport default Titles;","import React from 'react';\n\nconst Form = (props) => {\n    return (\n        <form onSubmit={props.loadWeather}>\n            <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n            <button>Get Weather</button>\n        </form>\n    )\n}\n\nexport default Form; ","import React from 'react';\n\nconst Weather = (props) => {\n    return (\n        <div>\n            {props.country && props.city && <p>Location: {props.city},  {props.country}</p>}\n            {props.temperature && <p>Temperature: {props.temperature} °F</p>}\n            {props.tempLow && props.tempHigh && <p>High Temp: {props.tempHigh}°F  Low Temp: {props.tempLow}°F</p>}\n            {props.humidity && <p>Humidity: {props.humidity} %</p>}\n            {props.description && <p>Conditions: {props.description}</p>}\n            {props.windSpeed && <p>Wind Speed: {props.windSpeed} mph</p>}\n            {props.error && <p>{props.error}</p>}\n        </div>\n    )\n}\n\nexport default Weather; ","import React from 'react';\nimport Titles from '../src/components/titles';\nimport Form from '../src/components/form';\nimport Weather from '../src/components/weather'\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    tempLow: undefined,\n    tempHigh: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    windSpeed: undefined,\n    error: undefined\n}\n\n  getWeather = async (e) => {\n    \n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n    const response = await api_call.json();\n    \n    this.setState({\n      temperature: Math.trunc((response.main.temp - 273.15)*(1.8)+32),\n      tempLow: Math.trunc((response.main.temp_min - 273.15)*(1.8)+32),\n      tempHigh: Math.trunc((response.main.temp_max - 273.15)*(1.8)+32),\n      city: response.name,\n      country: response.sys.country,\n      humidity: response.main.humidity,\n      description: response.weather[0].description,\n      windSpeed: response.wind.speed,\n      error: \"\"\n  })\n\n    console.log(response);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <div className=\"form\">\n        <Titles />\n        <Form \n          loadWeather={this.getWeather}\n        />\n        <Weather \n          temperature={this.state.temperature}\n          tempLow={this.state.tempLow}\n          tempHigh={this.state.tempHigh}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          windSpeed={this.state.windSpeed}\n          error={this.state.error}\n        />\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}